{"version":3,"sources":["components/ChatMessage/star_filled.svg","components/Nav/logo.svg","components/ChatMessage/placeholder.svg","components/ChatMessage/star_empty.svg","components/Nav/Nav.js","components/ChannelSelector/ChannelSelector.js","components/ChatMessage/ChatMessage.js","components/ChatArea/ChatArea.js","components/Button/Button.js","components/NewMessage/NewMessage.js","App.js","index.js"],"names":["module","exports","Nav","useState","starCount","className","src","logo","alt","starFilled","ChannelSelector","channels","selectedChannel","setSelectedChannel","map","channelName","index","key","onClick","selectChannel","ChatMessage","props","isStarred","setIsStarred","starIcon","starEmpty","avatar","text","ChatArea","messages","Button","type","children","NewMessage","value","onChange","onChangeMessage","placeholder","onClickSend","App","message","setMessage","setMessages","ev","target","ReactDOM","render","document","getElementById"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,yC,kBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,ySCuB5BC,MAjBf,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KAKb,OALa,KAMX,yBAAKC,UAAU,OACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAEzC,yBAAKH,UAAU,oBACZD,EACD,yBAAKE,IAAKG,IAAYD,IAAI,Y,MCcnBE,MA5Bf,WAA4B,IAAD,EACOP,mBAAS,CACvC,cACA,SACA,UAJuB,mBAClBQ,EADkB,aAMqBR,mBAAS,gBAN9B,mBAMlBS,EANkB,KAMDC,EANC,KAYzB,OACE,yBAAKR,UAAU,mBACb,yBAAKA,UAAU,iCAAf,gBAEEM,EAASG,KAAI,SAACC,EAAaC,GAAd,OACXJ,IAAoBG,EAClB,yBAAKE,IAAKD,EAAOX,UAAU,6DAA3B,KAA0FU,GAE1F,yBAAKG,QAAS,kBAZxB,SAAuBH,GACrBF,EAAmBE,GAWSI,CAAcJ,IAAcE,IAAKD,EAAOX,UAAU,2BAAtE,KAAmGU,Q,8CCWhGK,MA3Bf,SAAqBC,GAAO,MAEQlB,oBAAS,GAFjB,mBAEnBmB,EAFmB,KAERC,EAFQ,KAWtBC,EAAWC,IAKf,OAJIH,IACFE,EAAWf,KAIX,yBAAKJ,UAAU,eACb,yBAAKA,UAAU,qBAAqBC,IAAKoB,IAAQlB,IAAI,WACrD,yBAAKH,UAAU,oBACb,2BAAIgB,EAAMM,OAEZ,yBAAKT,QAlBT,WAIEK,GAAcD,IAccjB,UAAU,mBAAmBC,IAAKkB,EAAUhB,IAAI,WCTjEoB,MAff,SAAkBP,GAEhB,OACE,yBAAKhB,UAAU,YAEXgB,EAAMQ,SAASf,KAAI,SAACa,EAAMX,GAAP,OACjB,kBAAC,EAAD,CACEC,IAAKD,EACLW,KAAMA,S,YCIHG,MAdf,SAAgBT,GACd,IAAIhB,EAAY,SAMhB,MAJmB,SAAfgB,EAAMU,OACR1B,EAAY,uBAIZ,yBAAKA,UAAWA,EAAWa,QAASG,EAAMH,SACvCG,EAAMW,WCEEC,MATf,SAAoBZ,GAClB,OACE,yBAAKhB,UAAU,cACb,2BAAO6B,MAAOb,EAAMa,MAAOC,SAAUd,EAAMe,gBAAiBC,YAAY,sBACxE,kBAAC,EAAD,CAAQnB,QAASG,EAAMiB,aAAvB,UCmCSC,MApCf,WAAgB,IAAD,EACiBpC,mBAAS,IAD1B,mBACNqC,EADM,KACGC,EADH,OAEmBtC,mBAAS,CACvC,iBACA,cACA,cACA,QANW,mBAEN0B,EAFM,KAEIa,EAFJ,KAsBb,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUwB,SAAUA,IACpB,kBAAC,EAAD,CACEK,MAAOM,EACPJ,gBApBN,SAAyBO,GACvBF,EAAWE,EAAGC,OAAOV,QAoBjBI,YAjBN,WAEEI,EAAY,GAAD,mBACNb,GADM,CAETW,KAEFC,EAAW,SCvBfI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.611de9b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/star_filled.6ac1fd9c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.0343b06d.svg\";","module.exports = __webpack_public_path__ + \"static/media/placeholder.bb8be15e.svg\";","module.exports = __webpack_public_path__ + \"static/media/star_empty.a6bd1258.svg\";","import React, { useState } from 'react';\nimport './Nav.css';\n\nimport logo from './logo.svg';\nimport starFilled from '../ChatMessage/star_filled.svg';\n\nfunction Nav() {\n  const [starCount, setStarCount] = useState(0);\n  // SOLUTION Mystery of the moment: How can I get the star count to show here?\n  // (See other activities for solution)\n\n  return (\n    <div className=\"Nav\">\n      <img src={logo} className=\"Nav-logo\" alt=\"sleck\" />\n\n      <div className=\"Nav-starredCount\">\n        {starCount}\n        <img src={starFilled} alt=\"Star\" />\n      </div>\n    </div>\n  );\n}\n\nexport default Nav;\n","import React, { useState } from 'react';\nimport './ChannelSelector.css';\n\nfunction ChannelSelector() {\n  const [channels, setChannels] = useState([\n    'parking-lot',\n    'random',\n    'jokes',\n  ]);\n  const [selectedChannel, setSelectedChannel] = useState('parking-lot');\n\n  function selectChannel(channelName) {\n    setSelectedChannel(channelName);\n  }\n\n  return (\n    <div className=\"ChannelSelector\">\n      <div className=\"ChannelSelector-channelHeader\">All Channels</div>\n      {\n        channels.map((channelName, index) => (\n          selectedChannel === channelName ? (\n            <div key={index} className=\"ChannelSelector-channel ChannelSelector-channel--selected\"># {channelName}</div>\n          ) : (\n            <div onClick={() => selectChannel(channelName)} key={index} className=\"ChannelSelector-channel\"># {channelName}</div>\n          )\n        ))\n      }\n    </div>\n  );\n}\n\nexport default ChannelSelector;\n","import React, { useState } from 'react';\nimport './ChatMessage.css';\n\nimport avatar from './placeholder.svg';\nimport starEmpty from './star_empty.svg';\nimport starFilled from './star_filled.svg';\n\nfunction ChatMessage(props) {\n  // Start out unstarred\n  const [isStarred, setIsStarred] = useState(false);\n\n  function toggleStar() {\n    // Solution: MYSTERY of the MOMENT: How do I reach into the Nav component\n    // to update the number of stars?\n    // (See other activities for solution)\n    setIsStarred(!isStarred);\n  }\n\n  let starIcon = starEmpty;\n  if (isStarred) {\n    starIcon = starFilled;\n  }\n\n  return (\n    <div className=\"ChatMessage\">\n      <img className=\"ChatMessage-avatar\" src={avatar} alt=\"avatar\" />\n      <div className=\"ChatMessage-text\">\n        <p>{props.text}</p>\n      </div>\n      <img onClick={toggleStar} className=\"ChatMessage-star\" src={starIcon} alt=\"star\" />\n    </div>\n  );\n}\n\nexport default ChatMessage;\n","import React from 'react';\nimport './ChatArea.css';\n\nimport ChatMessage from \"../ChatMessage/ChatMessage.js\";\n\nfunction ChatArea(props) {\n\n  return (\n    <div className=\"ChatArea\">\n      {\n        props.messages.map((text, index) => (\n          <ChatMessage\n            key={index}\n            text={text} />\n        ))\n      }\n    </div>\n  );\n}\n\nexport default ChatArea;\n","import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n  let className = 'Button';\n\n  if (props.type === 'gray') {\n    className = 'Button Button--gray';\n  }\n\n  return (\n    <div className={className} onClick={props.onClick}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport './NewMessage.css';\n\nimport Button from '../Button/Button.js';\n\nfunction NewMessage(props) {\n  return (\n    <div className=\"NewMessage\">\n      <input value={props.value} onChange={props.onChangeMessage} placeholder=\"Type your message\" />\n      <Button onClick={props.onClickSend}>Send</Button>\n    </div>\n  );\n}\n\nexport default NewMessage;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Nav from './components/Nav/Nav.js';\nimport ChannelSelector from './components/ChannelSelector/ChannelSelector.js';\nimport ChatArea from './components/ChatArea/ChatArea.js';\nimport NewMessage from './components/NewMessage/NewMessage.js';\n\nfunction App() {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([\n    'Hi how are you',\n    'how are you',\n    'pls respond',\n    'pls',\n  ]);\n\n  function onChangeMessage(ev) {\n    setMessage(ev.target.value);\n  }\n\n  function sendMessage() {\n    // Set messages to be the current messages, and the new one\n    setMessages([\n      ...messages,\n      message,\n    ]);\n    setMessage(''); // Clear out the message box\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <ChannelSelector />\n      <ChatArea messages={messages} />\n      <NewMessage\n        value={message}\n        onChangeMessage={onChangeMessage}\n        onClickSend={sendMessage}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}