{"version":3,"sources":["components/Button/Button.js","components/Calculator/Calculator.js","App.js","index.js"],"names":["Button","props","className","type","onClick","children","Calculator","onDigitClicked","value","nextClear","onChangeNumber","newNumber","String","numberDisplay","Math","round","onSetOperation","App","useState","currentNum","setCurrentNum","accum","setAccum","addend","setAddend","setNextClear","operation","setOperation","newOperation","results","leftString","rightString","left","Number","right","console","error","NaN","computeValue","number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.88eb510d.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nfunction Button(props) {\n\n  let className = 'Button';\n\n  if (props.type === 'red') {\n    className = 'Button Button--red';\n  }\n  if (props.type === 'green') {\n    className = 'Button Button--green';\n  }\n  if (props.type === 'blue') {\n    className = 'Button Button--blue';\n  }\n  if (props.type === 'yellow') {\n    className = 'Button Button--yellow';\n  }\n\n  return (\n    <div className={className} onClick={props.onClick}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport './Calculator.css';\n\nimport Button from '../Button/Button.js';\n\nfunction Calculator(props) {\n\n  function onDigitClicked(value) {\n    if (props.nextClear) {\n      // If we had just entered an operation, then this press should clear the\n      // screen for a new number\n      props.onChangeNumber(value);\n    } else {\n      // Otherwise, the new digit \"accumulates\" with the previous digits for a\n      // longer number\n      const newNumber = String(props.numberDisplay) + value;\n      props.onChangeNumber(newNumber);\n    }\n  }\n\n  return (\n    <div className=\"Calculator\">\n      {/*\n        <div className=\"Calculator-currentOperation\">\n          {props.operation}\n        </div>\n      */}\n      <div className=\"Calculator-display\">\n        {Math.round((props.numberDisplay || 0) * 1000) / 1000}\n      </div>\n      {/*\n        <div className=\"Calculator-extraOperations\">\n          <Button onClick={() => props.onSetOperation('todo')} type=\"green\">exp</Button>\n          <Button onClick={() => props.onSetOperation('todo')} type=\"green\">%</Button>\n          <Button onClick={() => props.onSetOperation('todo')} type=\"green\">CE</Button>\n        </div>\n      */}\n      {/*\n        For a \"clear button\", use code something like this:\n        function clearAll() {\n          props.onChangeNumber('');\n          props.onSetOperation(null);\n        }\n      <div className=\"Calculator-extraOperations\">\n          <Button onClick={clearAll} type=\"green\">Clear</Button>\n      </div>\n      */}\n      <div className=\"Calculator-keypad\">\n        <Button onClick={() => onDigitClicked('9')}>9</Button>\n        <Button onClick={() => onDigitClicked('8')}>8</Button>\n        <Button onClick={() => onDigitClicked('7')}>7</Button>\n        <Button onClick={() => onDigitClicked('6')}>6</Button>\n        <Button onClick={() => onDigitClicked('5')}>5</Button>\n        <Button onClick={() => onDigitClicked('4')}>4</Button>\n        <Button onClick={() => onDigitClicked('3')}>3</Button>\n        <Button onClick={() => onDigitClicked('2')}>2</Button>\n        <Button onClick={() => onDigitClicked('1')}>1</Button>\n        <Button onClick={() => onDigitClicked('0')}>0</Button>\n        <Button onClick={() => props.onSetOperation('equals')} type=\"red\">=</Button>\n        <Button onClick={() => onDigitClicked('.')} type=\"red\">.</Button>\n      </div>\n      <div className=\"Calculator-operations\">\n        <Button onClick={() => props.onSetOperation('divide')} type=\"yellow\">รท</Button>\n        <Button onClick={() => props.onSetOperation('multiply')} type=\"yellow\">ร</Button>\n        <Button onClick={() => props.onSetOperation('subtract')} type=\"yellow\">-</Button>\n        <Button onClick={() => props.onSetOperation('add')} type=\"yellow\">+</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default Calculator;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Calculator from './components/Calculator/Calculator.js';\n\n/*\n  Given a left and right operand, and an operation, it actually performs\n  the operation requested and returns the result.\n*/\nfunction computeValue(operation, leftString, rightString) {\n  const left = Number(leftString);\n  const right = Number(rightString);\n  if (!left) {\n    return right;\n  }\n  if (operation === 'add') {\n    return left + right;\n  } else if (operation === 'multiply') {\n    return left * right;\n  } else if (operation === 'subtract') {\n    return left - right;\n  } else if (operation === 'divide') {\n    return left / right;\n  } else {\n    console.error('Bad operation', operation);\n    return NaN;\n  }\n}\n\nfunction App() {\n\n  const [currentNum, setCurrentNum] = useState('');\n  const [accum, setAccum] = useState('');\n  const [addend, setAddend] = useState('');\n  const [nextClear, setNextClear] = useState(true);\n  const [operation, setOperation] = useState(null);\n\n  function onOperationChange(newOperation) {\n    // If this is the first operation set, then we need to set the\n    // accumulator and the operation value\n    if (!newOperation) {\n      setNextClear(true);\n      setOperation(newOperation);\n      setAccum(currentNum);\n      return\n    }\n\n    // If the operation is not equals, then set the operation state\n    if (newOperation !== 'equals') {\n      setOperation(newOperation);\n\n      // If we have just hit an operation, we should just exit now, to\n      // avoid \"double presses\"\n      if (nextClear) {\n        return;\n      }\n    }\n\n    // Actually perform operation\n    const results = computeValue(operation, accum, addend);\n\n    setNextClear(true);\n    setCurrentNum(results);\n    setAccum(results);\n  }\n\n  function onNumberChange(number) {\n    setCurrentNum(number);\n    setAddend(number);\n    setNextClear(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <Calculator\n        numberDisplay={currentNum}\n        operation={operation}\n        nextClear={nextClear}\n        onSetOperation={onOperationChange}\n        onChangeNumber={onNumberChange} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}