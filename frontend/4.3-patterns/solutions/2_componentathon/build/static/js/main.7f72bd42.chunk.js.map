{"version":3,"sources":["components/Button/Button.js","components/FieldSet/FieldSet.js","components/Tabs/Tabs.js","components/TagList/TagList.js","components/LengthSelectorInput/LengthSelectorInput.js","App.js","index.js"],"names":["Button","props","className","onClick","children","FieldSet","legend","label","type","placeholder","value","onChange","Tabs","tabs","map","tab","currentTab","key","TagList","useState","newTagValue","setNewTagValue","tags","tag","index","slice","splice","deleteTag","event","target","push","LengthSelectorInput","count","setCount","text","setText","extraClass","length","e","App","firstname","setFirstName","allTabs","setCurrentTabs","currentTab2","setCurrentTabs2","allTags","setAllTags","buttonPresses","setButtonPresses","ev","tabName","newTags","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f72bd42.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nconst Button = props => (\n  <div className=\"Button\" onClick={props.onClick}>\n    {props.children}\n  </div>\n);\n\nexport default Button;\n","import React from 'react';\nimport './FieldSet.css';\n\n// HINT: Add code here to show label, legend, placeholder, to set value,\n// and register an onChange event\nconst FieldSet = props => (\n  <div className=\"FieldSet\">\n    <div className=\"FieldSet-legend\">{props.legend}</div>\n    <div className=\"FieldSet-label\">{props.label}</div>\n    <input type=\"text\"\n      placeholder={props.placeholder}\n      value={props.value}\n      onChange={props.onChange}\n    />\n\n    {/*\n      The \"splat\" operator is a shortcut to include ALL props. At some\n      places it's very popular, yet at other workplaces they might not\n      allow it, since it is too \"implicit\".\n    */}\n    {/*<input type=\"text\" {...props} /> */}\n  </div>\n);\n\nexport default FieldSet;\n","import React from 'react';\nimport './Tabs.css';\nconst Tabs = props => (\n  <div className=\"Tabs\">\n    {\n      props.tabs.map(tab => (\n        <div\n          className={\n            tab === props.currentTab  ? (\n              \"Tabs-tab Tabs-tab--selected\"\n            ) : (\n              \"Tabs-tab\"\n            )\n          }\n          onClick={() => props.onChange(tab)}\n          key={tab}>\n          {tab}\n        </div>\n      ))\n    }\n  </div>\n)\n\nexport default Tabs;\n","import React, { useState } from 'react';\nimport './TagList.css';\nimport Button from '../Button/Button.js';\n\nfunction TagList(props) {\n  // We are adding state here, since this is one of the rare situations where\n  // it's okay to add state to a child component, as use of this input is\n  // entirely confined. This is because what they are typing for the \"new tag\"\n  // will only become useful when it is saved and becomes part of the list,\n  // which IS stored in the exterior state.\n  const [newTagValue, setNewTagValue] = useState('');\n\n  function deleteTag(index) {\n    const tags = props.tags.slice();\n    tags.splice(index, 1); // remove element\n    props.onChange(tags);\n  }\n\n  function addTag() {\n    const tags = props.tags.slice();\n    tags.push(newTagValue);\n    setNewTagValue('');\n    props.onChange(tags);\n  }\n\n  function onNewTagValueChanged(event) {\n    setNewTagValue(event.target.value);\n  }\n\n  return (\n    <div className=\"TagList\">\n      {\n        props.tags.map((tag, index) => (\n          <div className=\"TagList-tag\" key={index}>\n            {tag}\n            <Button onClick={() => deleteTag(index)}>x</Button>\n          </div>\n        ))\n      }\n\n      <div className=\"TagList-final\">\n        <input\n          className=\"TagList-tag\"\n          type=\"text\"\n          placeholder={\"Add new tag\"}\n          value={newTagValue}\n          onChange={onNewTagValueChanged}\n        />\n        <Button onClick={addTag}>+</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default TagList;\n","// Bonus Activity #3\n\nimport React, { useState } from 'react';\n\nimport './LengthSelectorInput.css';\n\nfunction LengthSelectorInput () {\n  // Create 2 state variables\n  const [count, setCount] = useState(10);\n  const [text, setText] = useState('');\n\n  // Conditionally add a class based on if the text is too long\n  let extraClass = '';\n  if (text.length > count) {\n    extraClass = 'LengthSelectorInput--tooLong';\n  }\n\n  // Render the JSX\n  return (\n    <div className={\"LengthSelectorInput \" + extraClass}>\n      <button onClick={() => setCount(count - 1)}>-</button>\n      <div className=\"LengthSelectorInput-count\">\n        {count}\n      </div>\n      <button onClick={() => setCount(count + 1)}>+</button>\n      <input\n        onChange={(e) => setText(e.target.value)}\n        value={text}\n      />\n    </div>\n  );\n}\n\nexport default LengthSelectorInput;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Button from './components/Button/Button.js';\nimport FieldSet from './components/FieldSet/FieldSet.js';\nimport Tabs from './components/Tabs/Tabs.js';\nimport TagList from './components/TagList/TagList.js';\nimport LengthSelectorInput from './components/LengthSelectorInput/LengthSelectorInput.js';\n\nfunction App() {\n\n  const [dropdownShowing, setDropdownShowing] = useState(false);\n  const [firstname, setFirstName] = useState(\"\");\n  const [allTabs, setAllTabs] = useState(['John Lennon', 'Paul McCartney', 'George Harrison', 'Ringo Starr']);\n  const [currentTab, setCurrentTabs] = useState('Paul McCartney');\n  const [currentTab2, setCurrentTabs2] = useState(\"\");\n  const [allTags, setAllTags] = useState(['backgrounds', 'abstract', 'generated', 'cgi']);\n  const [buttonPresses, setButtonPresses] = useState(0);\n\n  function incrementButtonPresses() {\n    setButtonPresses(buttonPresses + 1);\n  }\n\n  function onFirstnameChange(ev) {\n    setFirstName(ev.target.value);\n  }\n\n  function setTags(newTags) {\n    setAllTags(newTags);\n  }\n\n  function setCurrentTab(tabName) {\n    setCurrentTabs(tabName);\n  }\n\n  function setCurrentTab2(tabName) {\n    setCurrentTabs2(tabName);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Component Style Library</h1>\n      </header>\n      <div className=\"App-library\">\n        <h1>Button</h1>\n        <Button onClick={incrementButtonPresses}>\n            Hello! {buttonPresses}\n        </Button>\n\n        <h1>FieldSet</h1>\n        <p>Name entered: {firstname}</p>\n        <FieldSet\n          onChange={onFirstnameChange}\n          value={firstname}\n          legend=\"Personal Information\"\n          label=\"First Name\"\n          placeholder=\"Please enter your real first name\" />\n\n        <h1>Tabs</h1>\n        <Tabs\n          tabs={allTabs}\n          currentTab={currentTab}\n          onChange={setCurrentTab} />\n        <p>{currentTab} is the best Beatle.</p>\n\n        <br />\n        <br />\n        <br />\n        <h1>TagList (Bonus #1)</h1>\n        <TagList\n          tags={allTags}\n          onChange={setTags} />\n\n        <h1>Tabs from TagList (Bonus #2)</h1>\n        <Tabs\n          tabs={allTags}\n          currentTab={currentTab2}\n          onChange={setCurrentTab2} />\n\n        <h1>Length selector input (Bonus #3)</h1>\n        <LengthSelectorInput />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}