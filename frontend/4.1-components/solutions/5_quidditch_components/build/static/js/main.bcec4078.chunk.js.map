{"version":3,"sources":["components/Nav/Nav.js","components/Character/Character.js","App.js","index.js"],"names":["Nav","className","src","alt","Character","props","info","name","house","onClick","onButtonClick","buttonText","chaserPlayers","players","filter","p","position","beaterPlayers","keeperPlayers","seekerPlayers","App","useState","availableChasers","setAvailableChasers","availableBeaters","setAvailableBeaters","availableKeepers","availableSeekers","chosenChasers","setChosenChasers","chosenBeaters","setChosenBeaters","chosenKeeper","setChosenKeeper","chosenSeeker","setChosenSeeker","map","character","index","key","desiredKeeper","onChooseKeeper","onChooseSeeker","chosenChasersCopy","slice","availableChasersCopy","push","splice","removeChaser","onChooseChaser","chosenBeatersCopy","availableBeatersCopy","removeBeater","onChooseBeater","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcec4078.chunk.js","sourcesContent":["import React from 'react';\nimport './Nav.css';\n\nfunction Nav () {\n  return (\n    <header className=\"Nav\">\n      <img src=\"https://i.imgur.com/NrJQBLb.png\" alt=\"snitch\" />\n      <h1 className=\"Nav-title\">Quidditch Manager</h1>\n    </header>\n  );\n}\n\nexport default Nav;\n\n","import React from 'react';\nimport './Character.css';\n\nfunction Character(props) {\n  if (!props.info) {\n    return (\n      <em>None selected</em>\n    );\n  }\n  return (\n    <div className=\"Character\">\n      <h3>{props.info.name}</h3>\n      <h4>{props.info.house}</h4>\n      <button onClick={props.onButtonClick}>\n        {props.buttonText || 'Choose'}\n      </button>\n    </div>\n  );\n}\n\nexport default Character;\n\n","/*\n  This solution has the \"component\" refactor.\n  \n  NOTE: It also uses alternate techniques for modifying state, by instead\n  copying the arrays and then performing the manipulation. The alternate\n  techniques are provided for the sake of variety.  All the state modifying\n  functions included here can be swapped out with their counterparts in the\n  other activity with no change in the behavior. Either method is considered\n  \"good programming\" --- it's largely a matter of taste which one you prefer!\n*/\n\nimport React, { useState } from 'react';\nimport './App.css';\n\nimport Nav from './components/Nav/Nav.js';\nimport Character from './components/Character/Character.js';\n\n// Pull in player data from the players JSON file\nimport players from './players.json';\n\n// Uses filter to narrow down array into 4 individual player arrays, one for\n// each of the 4 Quidditch positions\nconst chaserPlayers = players.filter(p => p.position === 'Chaser');\nconst beaterPlayers = players.filter(p => p.position === 'Beater');\nconst keeperPlayers = players.filter(p => p.position === 'Keeper');\nconst seekerPlayers = players.filter(p => p.position === 'Seeker');\n\n// Define our App\nfunction App () {\n\n  // Define \"pool\" of available characters\n  const [availableChasers, setAvailableChasers] = useState(chaserPlayers);\n  const [availableBeaters, setAvailableBeaters] = useState(beaterPlayers);\n\n  const availableKeepers = keeperPlayers;\n  const availableSeekers = seekerPlayers;\n\n  // Define which ones we'll be using for this team\n  const [chosenChasers, setChosenChasers] = useState([]);\n  const [chosenBeaters, setChosenBeaters] = useState([]);\n\n  // There is only one keeper and one seeker per team\n  const [chosenKeeper, setChosenKeeper] = useState(null);\n  const [chosenSeeker, setChosenSeeker] = useState(null);\n\n  function onChooseKeeper(index) {\n    // When they click on a \"chosen\" keeper, get the keeper that we want\n    // to use with the index provided, then do a setState\n    const desiredKeeper = availableKeepers[index];\n    setChosenKeeper(desiredKeeper);\n  }\n\n  function removeKeeper() {\n    setChosenKeeper(null); // Clear the chosen keeper\n  }\n\n  function onChooseSeeker(index) {\n    setChosenSeeker(availableSeekers[index]);\n  }\n\n  function removeSeeker() {\n    setChosenSeeker(null); // Clear the chosen seeker\n  }\n\n  function onChooseChaser(index) {\n    // Duplicate the two arrays we have to modify\n    const chosenChasersCopy = chosenChasers.slice();\n    const availableChasersCopy = availableChasers.slice();\n\n    // Retrieve the character in question\n    const character = availableChasersCopy[index];\n\n    chosenChasersCopy.push(character); // Add to the chosen\n\n    // Remove element from array based on index\n    availableChasersCopy.splice(index, 1);\n\n    // Update the chosen chasers and the available chasers arrays\n    setChosenChasers(chosenChasersCopy);\n    setAvailableChasers(availableChasersCopy);\n  }\n\n  function removeChaser(index) {\n    // Duplicate the two arrays we have to modify\n    const chosenChasersCopy = chosenChasers.slice();\n    const availableChasersCopy = availableChasers.slice();\n\n    // Same as \"add\", but in reverse: Retrieve, add, then remove\n    const character = chosenChasersCopy[index];\n    availableChasersCopy.push(character);\n    chosenChasersCopy.splice(index, 1); // remove based on index\n\n    // Update the chosen chasers and the available chasers arrays\n    setChosenChasers(chosenChasersCopy);\n    setAvailableChasers(availableChasersCopy);\n  }\n\n\n  function onChooseBeater(index) {\n    // Duplicate the two arrays we have to modify\n    const chosenBeatersCopy = chosenBeaters.slice();\n    const availableBeatersCopy = availableBeaters.slice();\n\n    // Retrieve the character in question\n    const character = availableBeatersCopy[index];\n    chosenBeatersCopy.push(character); // Add to the chosen\n    availableBeatersCopy.splice(index, 1); // remove based on index\n\n    // Update arrays with the new version\n    setChosenBeaters(chosenBeatersCopy);\n    setAvailableBeaters(availableBeatersCopy);\n  }\n\n  function removeBeater(index) {\n    // Duplicate the two arrays we have to modify\n    const chosenBeatersCopy = chosenBeaters.slice();\n    const availableBeatersCopy = availableBeaters.slice();\n\n    // Same as \"add\", but in reverse: Retrieve, add, then remove\n    const character = chosenBeatersCopy[index];\n    availableBeatersCopy.push(character);\n    chosenBeatersCopy.splice(index, 1);\n\n    setChosenBeaters(chosenBeatersCopy);\n    setAvailableBeaters(availableBeatersCopy);\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav />\n      <div className=\"TeamManager\">\n        <div className=\"TeamManager-position\">\n          <h2>Starting Keeper</h2>\n          <Character\n            info={chosenKeeper}\n            onButtonClick={removeKeeper}\n            buttonText={\"Remove\"} />\n        </div>\n\n        <div className=\"TeamManager-position\">\n          <h2>Roster (Keepers)</h2>\n          {\n            availableKeepers.map((character, index) => (\n              <Character\n                key={index}\n                info={character}\n                onButtonClick={() => onChooseKeeper(index)} />\n            ))\n          }\n        </div>\n\n        <div className=\"TeamManager-position\">\n          <h2>Starting Seeker</h2>\n          <Character\n            info={chosenSeeker}\n            onButtonClick={removeSeeker}\n            buttonText={\"Remove\"} />\n        </div>\n\n        <div className=\"TeamManager-position\">\n          <h2>Roster (Seekers)</h2>\n          {\n            availableSeekers.map((character, index) => (\n              <Character\n                key={index}\n                info={character}\n                onButtonClick={() => onChooseSeeker(index)} />\n            ))\n          }\n        </div>\n\n        <div className=\"TeamManager-position\">\n          <h2>Starting Chasers</h2>\n          {\n            chosenChasers.map((character, index) => (\n              <Character\n                key={index}\n                info={character}\n                onButtonClick={() => removeChaser(index)}\n                buttonText={\"Remove\"} />\n            ))\n          }\n        </div>\n\n        <div className=\"TeamManager-position\">\n          <h2>Roster (Chasers)</h2>\n          {\n            availableChasers.map((character, index) => (\n              <Character\n                key={index}\n                info={character}\n                onButtonClick={() => onChooseChaser(index)} />\n            ))\n          }\n        </div>\n\n        <div className=\"TeamManager-position\">\n          <h2>Starting Beaters</h2>\n          {\n            chosenBeaters.map((character, index) => (\n              <Character\n                key={index}\n                info={character}\n                onButtonClick={() => removeBeater(index)}\n                buttonText={\"Remove\"} />\n            ))\n          }\n        </div>\n\n        <div className=\"TeamManager-position\">\n          <h2>Roster (Beaters)</h2>\n          {\n            availableBeaters.map((character, index) => (\n              <Character\n                key={index}\n                info={character}\n                onButtonClick={() => onChooseBeater(index)} />\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Use this code to test out AppImproved\n// import AppImproved from './AppImproved';\n// ReactDOM.render(<AppImproved />, document.getElementById('root'));\n"],"sourceRoot":""}