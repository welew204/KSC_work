{"version":3,"sources":["App.js","index.js"],"names":["PAGE_SIZE","App","useState","totalPages","setTotalPages","books","setBooks","isLoading","setIsLoading","query","setQuery","page","setPage","doFetch","url","replace","join","console","log","fetch","then","response","json","data","Math","ceil","numFound","docs","useEffect","className","placeholder","onChange","ev","target","value","onClick","map","book","key","src","cover_i","alt","title_suggest","author_name","language","first_publish_year","publisher","ReactDOM","render","document","getElementById"],"mappings":"6JAGMA,G,KAAY,IAwHHC,MAtHf,WAAgB,IAAD,EAEuBC,mBAAS,GAFhC,mBAENC,EAFM,KAEMC,EAFN,OAGaF,mBAAS,IAHtB,mBAGNG,EAHM,KAGCC,EAHD,OAIqBJ,oBAAS,GAJ9B,mBAINK,EAJM,KAIKC,EAJL,OAKaN,mBAAS,yBALtB,mBAKNO,EALM,KAKCC,EALD,OAMWR,mBAAS,GANpB,mBAMNS,EANM,KAMAC,EANA,KA2Bb,SAASC,IACP,IAAMC,EAfC,CACL,wCACAL,EAAMM,QAAQ,OAAQ,KACtB,UACAf,EACA,WACAA,GAAaW,GAAQ,IACrBK,KAAK,IASPC,QAAQC,IAAI,mBAAoBJ,GAChCN,GAAa,GACbW,MAAML,GACHM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAGJnB,EAAcoB,KAAKC,KAAKF,EAAKG,SAAW1B,IACxCiB,QAAQC,IAAI,OAAQK,GAIpBjB,EAASiB,EAAKI,MACdnB,GAAa,MAuCnB,OAFAoB,oBAAUf,EAAS,CAACF,IAGlB,yBAAKkB,UAAU,OACb,yBAAKA,UAAU,aACb,2BACEC,YAAY,uBACZC,SA3BR,SAAuBC,GACrBtB,EAASsB,EAAGC,OAAOC,QA2BbA,MAAOzB,IAET,4BAAQ0B,QAxCd,WACe,IAATxB,EAEFE,IAGAD,EAAQ,KAkCN,WAEF,yBAAKiB,UAAU,aACb,4BAAQM,QA7Bd,WACMxB,GAAQ,GAGZC,EAAQD,EAAO,KAyBX,UACA,8BAAOA,EAAO,EAAd,MAAoBR,EAAa,GACjC,4BAAQgC,QAxBd,WACMxB,GAAQR,GAGZS,EAAQD,EAAO,KAoBX,WAEF,yBAAKkB,UAAU,SACZtB,EACG,yBAAKsB,UAAU,UAAf,cACExB,EAAM+B,KAAI,SAAAC,GAAI,OAChB,yBAAKR,UAAU,aAAaS,IAAKD,EAAKC,KAEpC,yBAAKC,IAAG,6CAAwCF,EAAKG,QAA7C,UAA8DC,IAAI,UAC1E,yBAAKZ,UAAU,sBACb,yBAAKA,UAAU,oBAAoBQ,EAAKK,eACxC,2CAFF,KAE6BL,EAAKM,aAAe,IAAI3B,KAAK,KAAK,6BAC7D,6CAHF,KAG+BqB,EAAKO,UAAY,IAAI5B,KAAK,KAAK,6BAC5D,mDAJF,IAIoCqB,EAAKQ,mBAAmB,6BAC1D,iDALF,KAKmCR,EAAKS,WAAa,IAAI9B,KAAK,KAAK,qCC7GjF+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f7338e61.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst PAGE_SIZE = 10;\n\nfunction App() {\n\n  const [totalPages, setTotalPages] = useState(0);\n  const [books, setBooks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('the lord of the rings');\n  const [page, setPage] = useState(0);\n\n  function getURL() {\n    // This function is for generating the API's URL based on the state.\n    // Create an array of all the principle parts of the URL, and then join the\n    // array together. This style of creating the string is just to make the\n    // method more legible, instead of being 1 super long line.\n    return [\n      'http://openlibrary.org/search.json?q=',\n      query.replace(/\\W+/g, '+'),\n      '&limit=',\n      PAGE_SIZE,\n      '&offset=',\n      PAGE_SIZE * (page || 0),\n    ].join('');\n  }\n\n  /*\n    doFetch will do the fetch to the API based on state, updating the state with\n    the books retrieved.\n  */\n  function doFetch() {\n    const url = getURL();\n    console.log('making query to ', url);\n    setIsLoading(true);\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        // Calculate the total pages, based on the page size and the number of\n        // results\n        setTotalPages(Math.ceil(data.numFound / PAGE_SIZE));\n        console.log('data', data);\n\n        // Set the state of the new information, notably the total number of\n        // pages, and the array of data we got back\n        setBooks(data.docs);\n        setIsLoading(false);\n      });\n  }\n\n  /*\n    onSearch is called when the Search button is clicked\n  */\n  function onSearch() {\n    if (page === 0) {\n      // No need to reset the page, so lets just do the fetch\n      doFetch();\n    } else {\n      // Reset the page to 0, which will in turn cause a fetch\n      setPage(0);\n    }\n  }\n\n  function onQueryChange(ev) {\n    setQuery(ev.target.value);\n  }\n\n  function decrementPage() {\n    if (page <= 0) {\n      return; // don't do anything\n    }\n    setPage(page - 1);\n  }\n\n  function incrementPage() {\n    if (page >= totalPages) {\n      return; // don't do anything\n    }\n    setPage(page + 1);\n  }\n\n  // This will cause data to be fetched 1) when we first load, and 2) any time\n  // the page variable gets changed\n  useEffect(doFetch, [page]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"SearchBox\">\n        <input\n          placeholder=\"Type a book title...\"\n          onChange={onQueryChange}\n          value={query}\n          />\n        <button onClick={onSearch}>Search</button>\n      </div>\n      <div className=\"Paginator\">\n        <button onClick={decrementPage}>&larr;</button>\n        <span>{page + 1} / {totalPages + 1}</span>\n        <button onClick={incrementPage}>&rarr;</button>\n      </div>\n      <div className=\"Books\">\n        {isLoading ?  (\n            <div className=\"loader\">Loading...</div>\n          ) : books.map(book => (\n            <div className=\"Books-book\" key={book.key}>\n              {/* ^- The \"book.key\" is a unique ID we'll use as the key for this map */}\n              <img src={`http://covers.openlibrary.org/b/id/${book.cover_i}-M.jpg`} alt=\"cover\" />\n              <div className=\"Books-book-details\">\n                <div className=\"Books-book-title\">{book.title_suggest}</div>\n                <strong>Author:</strong> {(book.author_name || []).join(',')}<br />\n                <strong>Language:</strong> {(book.language || []).join(',')}<br />\n                <strong>Year Published:</strong> {book.first_publish_year}<br />\n                <strong>Publisher(s):</strong> {(book.publisher || []).join(',')}<br />\n              </div>\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}