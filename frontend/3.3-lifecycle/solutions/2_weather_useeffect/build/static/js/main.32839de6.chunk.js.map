{"version":3,"sources":["App.js","index.js"],"names":["App","prevSearch","localStorage","getItem","console","log","useState","searchBox","setSearchBox","isLoading","setIsLoading","location","temperature","description","windSpeed","humidity","pressure","weatherResult","setWeatherResult","doFetch","url","fetch","then","response","json","data","main","name","Math","round","temp","weather","wind","speed","useEffect","ev","setItem","className","placeholder","value","onChange","target","onClick","ReactDOM","render","document","getElementById"],"mappings":"8KA6GeA,MA1Gf,WAGE,IAAIC,EAAaC,aAAaC,QAAQ,iBACtCC,QAAQC,IAAI,uBAAwBJ,GAC/BA,IACDA,EAAa,uBANJ,MASqBK,mBAASL,GAT9B,mBASNM,EATM,KASKC,EATL,OAUqBF,oBAAS,GAV9B,mBAUNG,EAVM,KAUKC,EAVL,OAW6BJ,mBAAS,CACjDK,SAAU,GACVC,YAAa,GACbC,YAAa,GACbC,UAAW,GACXC,SAAU,GACVC,SAAU,KAjBC,mBAWNC,EAXM,KAWSC,EAXT,KAoBb,SAASC,IACPf,QAAQC,IAAI,kBAAmBE,GAC/B,IACMa,EAAM,oDADEb,EAEJ,0CACVG,GAAa,GAEbW,MAAMD,GACHE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJf,GAAa,GACbN,QAAQC,IAAI,iBAAkBoB,GAEzBA,EAAKC,KASVR,EAAiB,CACfP,SAAUc,EAAKE,KACff,YAAagB,KAAKC,MAAMJ,EAAKC,KAAKI,KAAO,KACzCjB,YAAaY,EAAKM,QAAQ,GAAGL,KAC7BZ,UAAWc,KAAKC,MAAMJ,EAAKO,KAAKC,OAChClB,SAAUa,KAAKC,MAAMJ,EAAKC,KAAKX,UAC/BC,SAAUY,KAAKC,MAAMJ,EAAKC,KAAKV,YAd/BE,EAAiB,CACfP,SAAU,aACVE,YAAa,QAoCvB,OAlBAqB,oBAAUf,EAAS,IAGnBe,qBAAU,SAACC,GAET/B,QAAQC,IAAI,2BAA4BE,GACxCL,aAAakC,QAAQ,gBAAiB7B,KACrC,CAACA,IAGJ2B,qBAAU,WACN9B,QAAQC,IAAI,6CACb,IACH6B,qBAAU,WACN9B,QAAQC,IAAI,yDAEhBD,QAAQC,IAAI,eAGV,yBAAKgC,UAAU,kBACb,yBAAKA,UAAU,oBACZ5B,EAAY,yBAAK4B,UAAU,YAAmB,KAC/C,yBAAKA,UAAU,6BACZpB,EAAcN,UAGjB,yBAAK0B,UAAU,6BACb,0BAAMA,UAAU,gCACbpB,EAAcL,YADjB,QAC+B,oCAE/B,yBAAKyB,UAAU,gCAAgCpB,EAAcJ,cAE/D,yBAAKwB,UAAU,4BACb,yBAAKA,UAAU,0BAAf,QACA,yBAAKA,UAAU,yBAAyBpB,EAAcH,UAAtD,IAAiE,uCACjE,yBAAKuB,UAAU,0BAAf,YACA,yBAAKA,UAAU,yBAAyBpB,EAAcF,SAAtD,IAAgE,oCAChE,yBAAKsB,UAAU,0BAAf,YACA,yBAAKA,UAAU,yBAAyBpB,EAAcD,WAExD,yBAAKqB,UAAU,YACb,2BACEC,YAAY,sBACZC,MAAOhC,EACPiC,SAAU,SAAAL,GAAE,OAAI3B,EAAa2B,EAAGM,OAAOF,UACzC,4BAAQG,QAASvB,GAAjB,eChGVwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.32839de6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  // Challenge #5\n  // Get from local storage, if it exists\n  let prevSearch = localStorage.getItem('weathersearch');\n  console.log('previous search was:', prevSearch);\n  if (!prevSearch) {\n      prevSearch = 'Oakland, California'; // set to default for first time\n  }\n\n  const [searchBox, setSearchBox] = useState(prevSearch);\n  const [isLoading, setIsLoading] = useState(false);\n  const [weatherResult, setWeatherResult] = useState({\n    location: '',\n    temperature: '',\n    description: '',\n    windSpeed: '',\n    humidity: '',\n    pressure: '',\n  });\n\n  function doFetch() {\n    console.log('Hitting refresh', searchBox);\n    const query = searchBox;\n    const url = 'http://api.openweathermap.org/data/2.5/weather?q=' +\n      query + '&appid=0de82b6b4ba5d843dac44bbee4d02543';\n    setIsLoading(true);\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setIsLoading(false);\n        console.log('receiving data', data);\n\n        if (!data.main) { // 404\n          setWeatherResult({\n            location: 'Not found.',\n            description: '',\n          });\n          return; // Exit function prematurely\n        }\n\n        // Do state set for real data\n        setWeatherResult({\n          location: data.name,\n          temperature: Math.round(data.main.temp - 273),\n          description: data.weather[0].main,\n          windSpeed: Math.round(data.wind.speed),\n          humidity: Math.round(data.main.humidity),\n          pressure: Math.round(data.main.pressure),\n        });\n      });\n  }\n\n  // useEffect hook: Do the \"doFetch\" whenever we first load\n  useEffect(doFetch, []);\n\n  // Whenever the search box gets changed, set the localStorage\n  useEffect((ev) => {\n    // Challenge #4\n    console.log('Seach box being changed:', searchBox);\n    localStorage.setItem('weathersearch', searchBox);\n  }, [searchBox]);\n\n  // Challenge 1\n  useEffect(() => {\n      console.log('App is first mounted: useEffect with []');\n  }, []);\n  useEffect(() => {\n      console.log('App is was just rerendered: useEffect with no args');\n  });\n  console.log('rerendering');\n\n  return (\n    <div className='App App--clear'>\n      <div className=\"WeatherDashboard\">\n        {isLoading ? <div className=\"loading\"></div> : null}\n        <div className=\"WeatherDashboard-location\">\n          {weatherResult.location}\n        </div>\n\n        <div className=\"WeatherDashboard-overview\">\n          <span className=\"WeatherDashboard-temperature\">\n            {weatherResult.temperature}Â° <span>C</span>\n          </span>\n          <div className=\"WeatherDashboard-description\">{weatherResult.description}</div>\n        </div>\n        <div className=\"WeatherDashboard-details\">\n          <div className=\"WeatherDashboard-label\">Wind</div>\n          <div className=\"WeatherDashboard-data\">{weatherResult.windSpeed} <span>km/h</span></div>\n          <div className=\"WeatherDashboard-label\">Humidity</div>\n          <div className=\"WeatherDashboard-data\">{weatherResult.humidity} <span>%</span></div>\n          <div className=\"WeatherDashboard-label\">Pressure</div>\n          <div className=\"WeatherDashboard-data\">{weatherResult.pressure}</div>\n        </div>\n        <div className=\"Controls\">\n          <input\n            placeholder=\"Enter location name\"\n            value={searchBox}\n            onChange={ev => setSearchBox(ev.target.value)} />\n          <button onClick={doFetch}>Refresh</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//import App from './App_BonusChallengeSolution';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}